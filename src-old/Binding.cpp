/* generated by rust_qt_binding_generator */
#include "Binding.h"

namespace {

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }
}
extern "C" {
    QLivePlayerLib::Private* q_live_player_lib_new(QLivePlayerLib*);
    void q_live_player_lib_free(QLivePlayerLib::Private*);
    void q_live_player_lib_check_streamer_loading(const QLivePlayerLib::Private*);
    void q_live_player_lib_get_danmaku(QLivePlayerLib::Private*, QString*, qstring_set);
    void q_live_player_lib_get_url(const QLivePlayerLib::Private*, const ushort*, int, const ushort*, int, QString*, qstring_set);
    void q_live_player_lib_run_danmaku_client(QLivePlayerLib::Private*, const ushort*, int);
    void q_live_player_lib_run_streamer(const QLivePlayerLib::Private*, const ushort*, int, const ushort*, int, const ushort*, int);
    void q_live_player_lib_stop_danmaku_client(QLivePlayerLib::Private*);
};

QLivePlayerLib::QLivePlayerLib(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

QLivePlayerLib::QLivePlayerLib(QObject *parent):
    QObject(parent),
    m_d(q_live_player_lib_new(this)),
    m_ownsPrivate(true)
{
}

QLivePlayerLib::~QLivePlayerLib() {
    if (m_ownsPrivate) {
        q_live_player_lib_free(m_d);
    }
}
void QLivePlayerLib::check_streamer_loading() const
{
    return q_live_player_lib_check_streamer_loading(m_d);
}
QString QLivePlayerLib::get_danmaku()
{
    QString s;
    q_live_player_lib_get_danmaku(m_d, &s, set_qstring);
    return s;
}
QString QLivePlayerLib::get_url(const QString& room_url, const QString& extras) const
{
    QString s;
    q_live_player_lib_get_url(m_d, room_url.utf16(), room_url.size(), extras.utf16(), extras.size(), &s, set_qstring);
    return s;
}
void QLivePlayerLib::run_danmaku_client(const QString& room_url)
{
    return q_live_player_lib_run_danmaku_client(m_d, room_url.utf16(), room_url.size());
}
void QLivePlayerLib::run_streamer(const QString& streamer_type, const QString& url, const QString& extra) const
{
    return q_live_player_lib_run_streamer(m_d, streamer_type.utf16(), streamer_type.size(), url.utf16(), url.size(), extra.utf16(), extra.size());
}
void QLivePlayerLib::stop_danmaku_client()
{
    return q_live_player_lib_stop_danmaku_client(m_d);
}
